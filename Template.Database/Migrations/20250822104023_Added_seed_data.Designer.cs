// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Template.Database.Context;

#nullable disable

namespace Template.Database.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250822104023_Added_seed_data")]
    partial class Addedseeddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4b6e2892-da63-48d5-8ebc-7a3a5a6b9f9a",
                            ConcurrencyStamp = "934eeaf5-0909-4f24-9625-4d31f2332f3a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "feba6c0a-e24c-4410-a8c2-0145bd3d1853",
                            RoleId = "4b6e2892-da63-48d5-8ebc-7a3a5a6b9f9a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Template.Database.Context.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "feba6c0a-e24c-4410-a8c2-0145bd3d1853",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5831419-3edc-4f50-87cf-449e084dcda4",
                            CreatedDate = new DateTime(2025, 8, 22, 12, 40, 23, 565, DateTimeKind.Local).AddTicks(7166),
                            Email = "percy.munyunyu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            IsDeleted = false,
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "PERCY.MUNYUNYU@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHUPiul+cDCGt1ICETO6UIVmskSv47ft+Q6uII79KM5MZeMB4phTi+IE6a+EGvDtkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8da370a5-7f7c-40c1-96e9-3094e90c56ae",
                            TwoFactorEnabled = false,
                            UserName = "percy.munyunyu@gmail.com"
                        });
                });

            modelBuilder.Entity("Template.Library.Tables.Audit.TblAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TblAuditLog");
                });

            modelBuilder.Entity("Template.Library.Tables.Notification.TblEmailConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SmtpEnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("int");

                    b.Property<string>("SmtpServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TblEmailConfig", "comms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7b52cbe-f96a-471d-9b8e-e5fd5c9f3c13"),
                            CreatedById = new Guid("feba6c0a-e24c-4410-a8c2-0145bd3d1853"),
                            CreatedDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SmtpEnableSsl = true,
                            SmtpPassword = "tc#Prog219!",
                            SmtpPort = 587,
                            SmtpServer = "smtp.gmail.com",
                            SmtpUser = "percy.munyunyu@gmail.com"
                        });
                });

            modelBuilder.Entity("Template.Library.Tables.Notification.TblEmailQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCEmailAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SendAttempts")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToEmailAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TblEmailQueue", "comms");
                });

            modelBuilder.Entity("Template.Library.Tables.Notification.TblEmailTemplat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TblEmailTemplat", "comms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2ab8f49-8beb-4d80-a42b-2e5629d71a8e"),
                            Body = "<!DOCTYPE html>\r\n                            <html>\r\n                            \r\n                            <head>\r\n                                <meta charset=\"UTF-8\">\r\n                                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                                <title>Confirm Your Email Address</title>\r\n                            </head>\r\n                            \r\n                            <body style=\"margin: 0; padding: 0; font-family: Arial, Helvetica, sans-serif; background-color: #f5f5f5;\">\r\n                                <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"border-collapse: collapse;\">\r\n                                    <tr>\r\n                                        <td align=\"center\" style=\"padding: 40px 0;\">\r\n                                            <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"\r\n                                                style=\"max-width: 600px; border-collapse: collapse; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\">\r\n                                                <!-- Header -->\r\n                                                <tr>\r\n                                                    <td\r\n                                                        style=\"padding: 30px 30px 20px; text-align: center; background-color: #4a6cf7; border-radius: 8px 8px 0 0;\">\r\n                                                        <h1 style=\"margin: 0; color: white; font-size: 24px;\">Confirm Your Email Address</h1>\r\n                                                    </td>\r\n                                                </tr>\r\n                            \r\n                                                <!-- Content -->\r\n                                                <tr>\r\n                                                    <td style=\"padding: 30px;\">\r\n                                                        <p style=\"margin: 0 0 20px; color: #333333; line-height: 1.6;\">Hello [First Name],</p>\r\n                                                        <p style=\"margin: 0 0 20px; color: #333333; line-height: 1.6;\">Thank you for signing up for\r\n                                                            [ProductServiceName]. Please confirm that <strong>[EmailAddress]</strong> is your\r\n                                                            email address by clicking the button below:</p>\r\n                            \r\n                                                        <!-- Button -->\r\n                                                        <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"\r\n                                                            style=\"margin: 30px 0;\">\r\n                                                            <tr>\r\n                                                                <td align=\"center\">\r\n                                                                    <a href=\"[ConfirmationLink]\"\r\n                                                                        style=\"background-color: #4a6cf7; color: white; text-decoration: none; padding: 12px 24px; border-radius: 4px; display: inline-block; font-weight: bold;\">Confirm\r\n                                                                        Email Address</a>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        </table>\r\n                            \r\n                                                        <p style=\"margin: 0 0 20px; color: #666666; line-height: 1.6; font-size: 14px;\">If you did\r\n                                                            not create an account with us, please ignore this email.</p>\r\n                            \r\n                                                        <p style=\"margin: 0 0 10px; color: #333333; line-height: 1.6;\">Thanks,<br>The [CompanyName] Team\r\n                                                        </p>\r\n                                                    </td>\r\n                                                </tr>\r\n                            \r\n                                                <!-- Footer -->\r\n                                                <tr>\r\n                                                    <td\r\n                                                        style=\"padding: 20px 30px; background-color: #f8f9fa; border-radius: 0 0 8px 8px; text-align: center;\">\r\n                                                        <p style=\"margin: 0 0 10px; color: #666666; font-size: 12px;\">&copy; 2023 [CompanyName].\r\n                                                            All rights reserved.</p>\r\n                                                        <p style=\"margin: 0 0 10px; color: #666666; font-size: 12px;\">[CompanyAddress]</p>\r\n                                                        <p style=\"margin: 0; color: #666666; font-size: 12px;\">\r\n                                                            <a href=\"#\" style=\"color: #4a6cf7; text-decoration: none;\">Unsubscribe</a> |\r\n                                                            <a href=\"#\" style=\"color: #4a6cf7; text-decoration: none;\">Privacy Policy</a> |\r\n                                                            <a href=\"#\" style=\"color: #4a6cf7; text-decoration: none;\">Help Center</a>\r\n                                                        </p>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </body>\r\n                            \r\n                            </html>",
                            CreatedById = new Guid("feba6c0a-e24c-4410-a8c2-0145bd3d1853"),
                            CreatedDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ConfirmEmail",
                            Subject = "Confirm Email"
                        },
                        new
                        {
                            Id = new Guid("21bcb9c2-1485-4b09-8691-9fcac34613a4"),
                            Body = "<!DOCTYPE html>\r\n                                <html lang=\"en\">\r\n                                <head>\r\n                                    <meta charset=\"UTF-8\">\r\n                                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                                    <title>Password Reset Request</title>\r\n                                    <style>\r\n                                        body {\r\n                                            margin: 0;\r\n                                            padding: 0;\r\n                                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n                                            background-color: #f5f5f5;\r\n                                            color: #333333;\r\n                                        }\r\n                                        .email-container {\r\n                                            max-width: 600px;\r\n                                            margin: 0 auto;\r\n                                            background-color: #ffffff;\r\n                                        }\r\n                                        .email-header {\r\n                                            background-color: #4a6cf7;\r\n                                            padding: 30px;\r\n                                            text-align: center;\r\n                                            border-radius: 8px 8px 0 0;\r\n                                        }\r\n                                        .email-body {\r\n                                            padding: 30px;\r\n                                        }\r\n                                        .email-footer {\r\n                                            background-color: #f8f9fa;\r\n                                            padding: 20px;\r\n                                            text-align: center;\r\n                                            border-radius: 0 0 8px 8px;\r\n                                            font-size: 12px;\r\n                                            color: #666666;\r\n                                        }\r\n                                        .button {\r\n                                            display: inline-block;\r\n                                            padding: 12px 24px;\r\n                                            background-color: #4a6cf7;\r\n                                            color: white;\r\n                                            text-decoration: none;\r\n                                            border-radius: 4px;\r\n                                            font-weight: bold;\r\n                                            margin: 20px 0;\r\n                                        }\r\n                                        .text-center {\r\n                                            text-align: center;\r\n                                        }\r\n                                        .divider {\r\n                                            border-top: 1px solid #eaeaea;\r\n                                            margin: 25px 0;\r\n                                        }\r\n                                        .logo {\r\n                                            color: white;\r\n                                            font-size: 24px;\r\n                                            font-weight: bold;\r\n                                            text-decoration: none;\r\n                                        }\r\n                                    </style>\r\n                                </head>\r\n                                <body>\r\n                                    <table role=\"presentation\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\r\n                                        <tr>\r\n                                            <td align=\"center\" style=\"padding: 40px 0;\">\r\n                                                <!-- Email Container -->\r\n                                                <table role=\"presentation\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"email-container\">\r\n                                                    <!-- Header -->\r\n                                                    <tr>\r\n                                                        <td class=\"email-header\">\r\n                                                            <a href=\"#\" class=\"logo\">[CompanyName]</a>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    \r\n                                                    <!-- Body -->\r\n                                                    <tr>\r\n                                                        <td class=\"email-body\">\r\n                                                            <h2 style=\"margin-top: 0;\">Reset Your Password</h2>\r\n                                                            <p>Hello [Username],</p>\r\n                                                            <p>We received a request to reset your password for your [UserEmail] account. Click the button below to create a new password:</p>\r\n                                                            \r\n                                                            <div class=\"text-center\">\r\n                                                                <a href=\"[ResetPasswordLink]\" class=\"button\">Reset Password</a>\r\n                                                            </div>\r\n                                                            \r\n                                                            <p>If you didn't request a password reset, please ignore this email. Your password will remain unchanged.</p>\r\n                                                            \r\n                                                            <div class=\"divider\"></div>\r\n                                                            \r\n                                                            <p style=\"margin-bottom: 0;\"><strong>Having trouble?</strong> Copy and paste the following link into your browser:</p>\r\n                                                            <p style=\"word-break: break-all; color: #4a6cf7; margin-top: 5px;\">[ResetPasswordLink]</p>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    \r\n                                                    <!-- Footer -->\r\n                                                    <tr>\r\n                                                        <td class=\"email-footer\">\r\n                                                            <p>This email was sent to [UserEmail]. If you didn't request a password reset, <a href=\"#\" style=\"color: #4a6cf7;\">let us know</a>.</p>\r\n                                                            <p>&copy; 2023 [CompanyName]. All rights reserved.</p>\r\n                                                            <p>[CompanyName], [CompanyAddress]</p>\r\n                                                            <p>\r\n                                                                <a href=\"#\" style=\"color: #4a6cf7; text-decoration: none;\">Unsubscribe</a> | \r\n                                                                <a href=\"#\" style=\"color: #4a6cf7; text-decoration: none;\">Privacy Policy</a> | \r\n                                                                <a href=\"#\" style=\"color: #4a6cf7; text-decoration: none;\">Help Center</a>\r\n                                                            </p>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </table>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </body>\r\n                                </html>",
                            CreatedById = new Guid("feba6c0a-e24c-4410-a8c2-0145bd3d1853"),
                            CreatedDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ResetPassword",
                            Subject = "Reset Password"
                        });
                });

            modelBuilder.Entity("Template.Library.Tables.Notification.TblNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TblNotification", "comms");
                });

            modelBuilder.Entity("Template.Library.Tables.User.TblProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TblProfile", "user");
                });

            modelBuilder.Entity("Template.Library.Tables.Views.ViewApplicationUser", b =>
                {
                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("ViewApplicationUser", (string)null);
                });

            modelBuilder.Entity("Template.Library.Views.System.ViewSystemUserRoles", b =>
                {
                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("ViewSystemUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Template.Database.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Template.Database.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Template.Database.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Template.Database.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
